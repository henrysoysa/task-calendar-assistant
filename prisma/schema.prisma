datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

model Project {
  id        Int      @id @default(autoincrement())
  userId    String
  name      String
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
}

model Task {
  id           Int      @id @default(autoincrement())
  userId       String
  taskName     String
  description  String?
  priority     Priority
  projectId    Int?
  project      Project?  @relation(fields: [projectId], references: [id])
  deadline     DateTime
  timeRequired Int
  status       TaskStatus? @default(NOT_STARTED)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Event {
  id                   String    @id @default(cuid())
  googleCalendarEventId String?  @unique
  userId               String
  title                String
  description         String?
  startTime           DateTime
  endTime             DateTime
  isAllDay            Boolean   @default(false)
  lastSynced          DateTime
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

// Add Google Calendar models
model GoogleCalendarCredentials {
  id            String    @id @default(cuid())
  userId        String    @unique
  accessToken   String
  refreshToken  String?
  expiryDate    DateTime?
  lastSyncedAt  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  events        GoogleCalendarEvent[]
}

model GoogleCalendarEvent {
  id              String   @id @default(cuid())
  googleEventId   String   @unique
  credentialsId   String
  title           String
  description     String?
  startTime       DateTime
  endTime         DateTime
  isAllDay        Boolean  @default(false)
  isRecurring     Boolean  @default(false)
  recurringEventId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  credentials     GoogleCalendarCredentials @relation(fields: [credentialsId], references: [id], onDelete: Cascade)

  @@index([credentialsId])
}

model GoogleAccount {
  id          String    @id @default(cuid())
  userId      String    @unique
  accessToken String
  refreshToken String?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
